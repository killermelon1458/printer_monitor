#printer_monitor.py
import time
import socket
import os
from dotenv import load_dotenv
from pathlib import Path
from datetime import datetime
from pythonEmailNotify import EmailSender

# ==== CONFIG ====
LOG_FILE = Path("/home/sovol/printer_data/logs/klippy.log")
PAUSE_KEYWORDS = ["action: pause", "runout", "Filament Sensor"]
RESUME_KEYWORDS = ["resumed", "Print started"]
COMPLETE_KEYWORDS = ["Print complete"]
# =================

# Load environment variables from ~/.printer_monitor.env
load_dotenv(dotenv_path=os.path.expanduser("~/.printer_monitor.env"))

# Email sender setup
emailer = EmailSender(
    smtp_server="smtp.gmail.com",
    port=587,
    login=os.environ["SMTP_EMAIL"],
    password=os.environ["SMTP_PASS"],
    default_recipient=os.environ["SMTP_TO"]
)

# Get system info
HOSTNAME = socket.gethostname()
try:
    LOCAL_IP = socket.gethostbyname(HOSTNAME)
except socket.gaierror:
    LOCAL_IP = "Unavailable"

def current_time_str():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def monitor_klipper_log():
    print("üì° Monitoring Klipper log for pause and completion events...")

    paused_sent = False
    complete_sent = False

    try:
        with LOG_FILE.open("r") as log:
            log.seek(0, 2)  # Go to end of file

            while True:
                line = log.readline()
                if not line:
                    time.sleep(0.5)
                    continue

                line_lower = line.lower()

                # === Detect Print Complete ===
                if any(kw in line_lower for kw in COMPLETE_KEYWORDS) and not complete_sent:
                    subject = "‚úÖ Klipper Print Finished"
                    body = f"""Your printer has completed a print.

Device: {HOSTNAME}
IP: {LOCAL_IP}
Time: {current_time_str()}

Log line:
{line.strip()}
"""
                    emailer.sendEmail(subject, body)
                    complete_sent = True
                    paused_sent = False  # Reset pause flag in case a new print starts

                # === Detect Pause ===
                elif any(kw in line_lower for kw in PAUSE_KEYWORDS) and not paused_sent:
                    reason = "Unknown"
                    if "runout" in line_lower:
                        reason = "Filament runout detected"
                    elif "action: pause" in line_lower:
                        reason = "Klipper pause command"

                    subject = "üõë Klipper Print Paused"
                    body = f"""Your printer has paused.

Device: {HOSTNAME}
IP: {LOCAL_IP}
Time: {current_time_str()}

Likely reason: {reason}

Log line:
{line.strip()}
"""
                    emailer.sendEmail(subject, body)
                    paused_sent = True
                    complete_sent = False  # If it paused again, the print clearly isn't finished

                # === Reset Pause State if Print Resumed ===
                elif any(kw in line_lower for kw in RESUME_KEYWORDS):
                    paused_sent = False

    except Exception as e:
        print("‚ùå Exception occurred in monitoring loop.")
        emailer.sendException(e)

if __name__ == "__main__":
    monitor_klipper_log()
